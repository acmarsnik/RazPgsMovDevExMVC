@page
@model RazorPagesMovie.Pages.DataGrids.RpAbmcDEAsIsDGModel
@{
    ViewData["Title"] = "Razor Page AutoBid Mechanical - DevExtreme As Is Data Grid";
}

<h2>Razor Page AutoBid Mechanical - DevExtreme As Is Data Grid</h2>
<h4>Data Source: As Is Autobid Mechanical JSON File Stored <a href="https://www.jasonbase.com/things/2dqn.json" target="_blank">Here</a> </h4>
<h4>
    Data Access Method:
    <br /> <br />
    .DataSource("<a href="https://www.jasonbase.com/things/2dqn.json" target="_blank">https://www.jasonbase.com/things/2dqn.json</a>", "TrimbleItemId")
</h4>
<br />
<br />
<h4>Display: Dev Extreme Data Grid</h4>
<h4>Other Info: None</h4>
<br /> <br />

@(Html.DevExtreme().DataGrid<RazorPagesMovie.Models.ContributorItemDetails>
                            ()
                            .Columns(columns =>
                            {
                                columns.AddFor(c => c.contributorItemDetails);
                                columns.AddFor(c => c.fittingCategory);
                                columns.AddFor(c => c.fittingType);
                                columns.AddFor(c => c.name);
                                columns.AddFor(c => c.trimbleAssemblyItemId);
                                columns.AddFor(c => c.trimbleItemId);
                                columns.AddFor(c => c.version);
                            })
                            .DataSource("https://www.jasonbase.com/things/2dqn.json")
                            .ColumnChooser(c => c.Enabled(true))
                            .AllowColumnReordering(true)
                            .AllowColumnResizing(true)
                            .ColumnAutoWidth(true)
                            .Option("columnResizingMode", "widget")
                            .Option("showColumnLines", true)
                            .Option("showRowLines", true)
                            .Option("showRowBorders", true)
                            .Option("rowAlternationEnabled", true)

    //Uncomment to turn infinite scrolling on
    //.Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Infinite))

    //As is ABMC Data Source
    //https://www.jasonbase.com/things/2dqn.json

    //Edit As is Data Source
    //https://www.jasonbase.com/things/2dqn/edit#
)

@(Html.DevExtreme().DataGrid<RazorPagesMovie.Models.ContributorItemDetails>
                            ()
                            .Columns(columns =>
                            {
                                columns.AddFor(c => c.contributorItemDetails);
                                columns.AddFor(c => c.fittingCategory);
                                columns.AddFor(c => c.fittingType);
                                columns.AddFor(c => c.name);
                                columns.AddFor(c => c.trimbleAssemblyItemId);
                                columns.AddFor(c => c.trimbleItemId);
                                columns.AddFor(c => c.version);
                            })
                            .DataSource("https://www.jasonbase.com/things/2dqn.json")
                            .ColumnChooser(c => c.Enabled(true))
                            .AllowColumnReordering(true)
                            .AllowColumnResizing(true)
                            .ColumnAutoWidth(true)
                            .Option("columnResizingMode", "widget")
                            .Option("showColumnLines", true)
                            .Option("showRowLines", true)
                            .Option("showRowBorders", true)
                            .Option("rowAlternationEnabled", true)
        .MasterDetail(m => m
            .Enabled(true)
            .Template(new TemplateName("gridContainer-details"))
        )
)

@using (Html.DevExtreme().NamedTemplate("gridContainer-details"))
{
    @(Html.DevExtreme().TabPanel()
                .FocusStateEnabled(false)
                .ElementAttr("class", "tabPanel-orders")
                .Items(items =>
                {
                    items.Add()
                        .Title("Connections")
                        .Template(new TemplateName("gridContainer-details-tab1Template"))
                        .Option("tabExtras", new { connectionID = new JS("data.SupplierID") });

                    items.Add()
                        .Title("Contributor ID")
                        .Template(new TemplateName("gridContainer-details-tab2Template"))
                        .Option("tabExtras", new JS("data"));
                })
    )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-details-tab1Template"))
{
    @(Html.DevExtreme().Form()
                .ElementAttr("class", "form-container")
                .FormData(new JS("tabExtras"))
                .LabelLocation(FormLabelLocation.Top)
                .Items(items =>
                {
                    items.AddSimple()
                        .Template(new TemplateName("gridContainer-details-tab1-gridTemplate"));
                })
    )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-details-tab1Template"))
{
    @(Html.DevExtreme().DataGrid()
                .ID(new JS("'gridContainer-orderHistoryGrid-' + component.option('formData').supplierID"))
                .ShowBorders(true)
                .DataSource("https://www.jasonbase.com/things/2dqn.json")
                .Paging(p => p.PageSize(5))
                .Columns(columns =>
                {
                    columns.Add().DataField("ConnectedTo");
                    columns.Add().DataField("ConnectionDirection");
                    columns.Add().DataField("ConnctionID");
                    columns.Add().DataField("ConnectionOtherDirection");
                    columns.Add().DataField("Diameter");
                    columns.Add().DataField("Discipline");
                    columns.Add().DataField("Flow");
                    columns.Add().DataField("Height");
                    columns.Add().DataField("Inset");
                    columns.Add().DataField("IsConnected");
                    columns.Add().DataField("Location");
                    columns.Add().DataField("Properties");
                    columns.Add().DataField("Shape");
                    columns.Add().DataField("Slope");
                    columns.Add().DataField("System");
                    columns.Add().DataField("Width");
                })
                .Summary(s => s
                    .TotalItems(totalItems =>
                    {
                        totalItems.Add()
                            .Column("UnitPrice")
                            .SummaryType(SummaryType.Sum)
                            .ValueFormat(f => f
                                .Currency("USD")
                                .Precision(2)
                            );

                        totalItems.Add()
                            .Column("Quantity")
                            .SummaryType(SummaryType.Count);
                    })
                )
    )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-details-tab2Template"))
{
    var formItemTemplate = "<%= editorOptions.value %>";

    @(Html.DevExtreme().Form()
                .ElementAttr("class", "address-form form-container")
                .FormData(new JS("tabExtras"))
                .ColCount(2)
                .Items(items =>
                {
                    items.AddSimple().DataField("Address").Template(formItemTemplate);
                    items.AddSimple().DataField("City").Template(formItemTemplate);
                    items.AddSimple().DataField("Region").Template(formItemTemplate);
                    items.AddSimple().DataField("PostalCode").Template(formItemTemplate);
                    items.AddSimple().DataField("Country").Template(formItemTemplate);
                    items.AddSimple().DataField("Phone").Template(formItemTemplate);
                })
    )
}
